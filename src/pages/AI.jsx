import { useEffect, useRef, useState } from 'react';
import { generateText } from '../services/gemini.js';
import { useLanguage } from '../context/LanguageContext';
import { t } from '../utils/translations';
import { formatAIResponse, aiResponseStyles } from '../utils/aiResponseFormatter';

export function AiPujaSuggestion() {
  const { language } = useLanguage();
  const [step, setStep] = useState('greeting'); // greeting, user-input, ai-response, action, booking, info
  const [userInput, setUserInput] = useState('');
  const [aiResponse, setAiResponse] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [bookingData, setBookingData] = useState({ name: '', date: '', location: '', type: 'online' });

  const handleUserInput = async () => {
    if (!userInput.trim()) return;

    setLoading(true); setError('');
    try {
      const prompt = `рднреВрдорд┐рдХрд╛: рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЖрдЪрд╛рд░реНрдп-рд╕рд╣рд╛рдпрдХ рд╣реИрдВред
рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рдкреНрд░рд╢реНрди: "${userInput}"

рдЖрдкрдХреЛ рддреАрди рднрд╛рдЧреЛрдВ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдирд╛ рд╣реИ:

(a) рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡:
- 1-2 рдЙрдкрдпреБрдХреНрдд рдкреВрдЬрд╛рдПрдБ рд╕реБрдЭрд╛рдПрдБ
- рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг рдмрддрд╛рдПрдБ

(b) рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг:
- рдХреНрдпреЛрдВ рдпрд╣ рдкреВрдЬрд╛ рдЙрдкрдпреБрдХреНрдд рд╣реИ
- рдХреНрдпрд╛ рд▓рд╛рдн рдорд┐рд▓реЗрдЧрд╛

(c) рд╕рд╛рдордЧреНрд░реА рд╕реВрдЪреА:
- рдкреВрдЬрд╛ рд╕рд╛рдордЧреНрд░реА рдХреА рд╕реВрдЪреА (5-7 рдЖрдЗрдЯрдо)

рдЙрддреНрддрд░ рдкреНрд░рд╛рд░реВрдк:
рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡: [рдкреВрдЬрд╛ рдХрд╛ рдирд╛рдо]
рдХрд╛рд░рдг: [рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг]
рд╕рд╛рдордЧреНрд░реА: [рд╕рд╛рдордЧреНрд░реА рд╕реВрдЪреА]`;

      const text = await generateText({ prompt });

      // AI response set successfully
      setAiResponse({
        pujaSuggestion: text || 'No response received',
        reason: t('ai.aiReasonSpecial', language),
        materials: t('ai.materialsContact', language)
      });

      setStep('action');
    } catch (e) {
      const msg = (e?.message || '').includes('Missing GEMINI_API_KEY') ? t('ai.apiKeyError', language) : (e?.message || t('ai.generalError', language));
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  const handleBooking = () => {
    // Here you would integrate with payment system
    setStep('greeting');
    setUserInput('');
    setAiResponse({});
  };

  const handleInfoRequest = async () => {
    setLoading(true);
    setError('');
    
    try {
      // Extract the puja name from the AI response for detailed vidhi
      const pujaName = aiResponse.pujaSuggestion ? 
        aiResponse.pujaSuggestion.split('\n')[0].replace(/[*:]/g, '').trim() : 
        userInput;
      
      const vidhiPrompt = `рднреВрдорд┐рдХрд╛: рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЖрдЪрд╛рд░реНрдп рд╣реИрдВред
рдкреВрдЬрд╛: "${pujaName}"

рдХреГрдкрдпрд╛ рдЗрд╕ рдкреВрдЬрд╛ рдХреА рд╕рдВрдкреВрд░реНрдг рд╡рд┐рдзрд┐ рдмрддрд╛рдПрдВ:

(a) рдкреВрдЬрд╛ рд╡рд┐рдзрд┐ (Step by Step):
- рддреИрдпрд╛рд░реА рдФрд░ рд╕реНрдерд╛рди рдХреА рд╢реБрджреНрдзрддрд╛
- рдкреВрдЬрд╛ рдХреА рд╢реБрд░реБрдЖрдд рдХреИрд╕реЗ рдХрд░реЗрдВ
- рдордВрддреНрд░ рдФрд░ рдЖрд░рддреА
- рд╕рдорд╛рдкрди рд╡рд┐рдзрд┐

(b) рдордВрддреНрд░ рдФрд░ рд╢реНрд▓реЛрдХ:
- рдореБрдЦреНрдп рдордВрддреНрд░ (рд╕рдВрд╕реНрдХреГрдд рдореЗрдВ)
- рдЖрд░рддреА рдХреЗ рд╢реНрд▓реЛрдХ
- рд╕рдВрдХрд▓реНрдк рдордВрддреНрд░

(c) рд╕рдордп рдФрд░ рджрд┐рд╢рд╛:
- рдЙрддреНрддрдо рд╕рдордп (рдореБрд╣реВрд░реНрдд)
- рджрд┐рд╢рд╛ рдХрд╛ рдорд╣рддреНрд╡
- рдХрд┐рддрдиреА рджреЗрд░ рддрдХ рдХрд░реЗрдВ

(d) рд╡рд┐рд╢реЗрд╖ рдирд┐рдпрдо:
- рдХреНрдпрд╛ рдХрд░реЗрдВ рдФрд░ рдХреНрдпрд╛ рди рдХрд░реЗрдВ
- рд╡реНрд░рдд рдХреЗ рдирд┐рдпрдо (рдпрджрд┐ рдХреЛрдИ рд╣реЛ)
- рдлрд▓ рдкреНрд░рд╛рдкреНрддрд┐ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рдмрд╛рддреЗрдВ

рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рд╕реНрдкрд╖реНрдЯ рднрд╛рд╖рд╛ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред`;

      const vidhiResponse = await generateText({ prompt: vidhiPrompt });
      
      setAiResponse({
        ...aiResponse,
        vidhiDetails: vidhiResponse || 'рд╡рд┐рдзрд┐ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рд╣реЛ рд╕рдХреАред'
      });
      
      setStep('info');
    } catch (e) {
      const msg = (e?.message || '').includes('Missing GEMINI_API_KEY') ? 
        t('ai.apiKeyError', language) : 
        (e?.message || t('ai.generalError', language));
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  const resetFlow = () => {
    setStep('greeting');
    setUserInput('');
    setAiResponse({});
    setError('');
  };



  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <style dangerouslySetInnerHTML={{ __html: aiResponseStyles }} />
      <h3 className="text-2xl font-bold text-[#1B5E20] mb-4 font-serif">ЁЯХЙ {t('ai.title', language)}</h3>

      {step === 'greeting' && (
        <div className="text-center">
          <div className="text-4xl mb-4">ЁЯЩП</div>
          <p className="text-lg text-[#424242] mb-6 font-devanagari">
            рдирдорд╕реНрддреЗ!<br />
            рдХреГрдкрдпрд╛ рдмрддрд╛рдЗрдП рдЖрдкрдХреЛ рдХрд┐рд╕ рд╡рд┐рд╖рдп рдореЗрдВ рдкреВрдЬрд╛ рдХрд╛ рд╕реБрдЭрд╛рд╡ рдЪрд╛рд╣рд┐рдП?<br />
            <span className="text-sm text-gray-600">(рдЙрджрд╛рд╣рд░рдг: рдХрд░рд┐рдпрд░, рд╕реНрд╡рд╛рд╕реНрдереНрдп, рд╡рд┐рд╡рд╛рд╣, рд╢рд╛рдВрддрд┐, рд╕рдВрддрд╛рди, рд╢рд┐рдХреНрд╖рд╛, рдзрди рдЖрджрд┐)</span>
          </p>
          <div className="flex gap-2">
            <input
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              className="flex-1 border rounded-lg px-3 py-2"
              placeholder={t('ai.placeholder', language)}
            />
            <button
              onClick={handleUserInput}
              disabled={loading}
              className="bg-[#FFB300] text-white px-4 py-2 rounded-lg hover:bg-[#FFC107]"
            >
{t('ai.ask', language)}
            </button>
          </div>
        </div>
      )}

      {step === 'action' && aiResponse.pujaSuggestion && (
        <div className="space-y-4">
          <div className="bg-white border border-gray-200 rounded-lg p-4 max-h-96 overflow-y-auto shadow-sm">
            <h4 className="font-bold text-[#1B5E20] mb-4 text-lg border-b border-gray-200 pb-2">ЁЯЩП AI рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡</h4>
            <div 
              className="font-devanagari text-sm leading-relaxed ai-response-content"
              dangerouslySetInnerHTML={{ 
                __html: formatAIResponse(aiResponse.pujaSuggestion) 
              }}
            />
          </div>

          <div className="flex gap-3 mt-6">
            <button
              onClick={handleBooking}
              className="flex-1 bg-[#FFB300] text-white px-4 py-3 rounded-lg hover:bg-[#FFC107] font-semibold"
            >
              ЁЯУЕ рдкреВрдЬрд╛ рдмреБрдХ рдХрд░реЗрдВ
            </button>
            <button
              onClick={handleInfoRequest}
              className="flex-1 bg-[#1B5E20] text-white px-4 py-3 rounded-lg hover:bg-[#2E7D32] font-semibold"
            >
              ЁЯУЦ рдкреВрд░реА рд╡рд┐рдзрд┐ рджреЗрдЦреЗрдВ
            </button>
          </div>
        </div>
      )}

      {step === 'booking' && (
        <div className="space-y-4">
          <h4 className="text-xl font-bold text-[#1B5E20]">рдкреВрдЬрд╛ рдмреБрдХрд┐рдВрдЧ</h4>
          <div className="grid grid-cols-1 gap-3">
            <input
              value={bookingData.name}
              onChange={(e) => setBookingData({ ...bookingData, name: e.target.value })}
              className="border rounded-lg px-3 py-2"
              placeholder="рдЖрдкрдХрд╛ рдирд╛рдо"
            />
            <input
              type="date"
              value={bookingData.date}
              onChange={(e) => setBookingData({ ...bookingData, date: e.target.value })}
              className="border rounded-lg px-3 py-2"
            />
            <select
              value={bookingData.type}
              onChange={(e) => setBookingData({ ...bookingData, type: e.target.value })}
              className="border rounded-lg px-3 py-2"
            >
              <option value="online">рдСрдирд▓рд╛рдЗрди рдкреВрдЬрд╛</option>
              <option value="offline">рдШрд░ рдкрд░ рдкреВрдЬрд╛</option>
            </select>
            {bookingData.type === 'offline' && (
              <input
                value={bookingData.location}
                onChange={(e) => setBookingData({ ...bookingData, location: e.target.value })}
                className="border rounded-lg px-3 py-2"
                placeholder="рдкреВрд░рд╛ рдкрддрд╛"
              />
            )}
          </div>
          <div className="flex gap-3">
            <button
              onClick={handleBooking}
              className="flex-1 bg-[#FFB300] text-white px-4 py-3 rounded-lg hover:bg-[#FFC107] font-semibold"
            >
              рдмреБрдХрд┐рдВрдЧ рдкреВрд░реА рдХрд░реЗрдВ
            </button>
            <button
              onClick={resetFlow}
              className="bg-gray-500 text-white px-4 py-3 rounded-lg hover:bg-gray-600"
            >
              рд░рджреНрдж рдХрд░реЗрдВ
            </button>
          </div>
        </div>
      )}

      {step === 'info' && (
        <div className="space-y-4">
          <h4 className="text-xl font-bold text-[#1B5E20]">ЁЯУЦ рдкреВрдЬрд╛ рд╡рд┐рдзрд┐ рдФрд░ рдордВрддреНрд░</h4>
          {aiResponse.vidhiDetails ? (
            <div className="bg-white border border-gray-200 rounded-lg p-4 max-h-96 overflow-y-auto shadow-sm">
              <div 
                className="font-devanagari text-sm leading-relaxed ai-response-content"
                dangerouslySetInnerHTML={{ 
                  __html: formatAIResponse(aiResponse.vidhiDetails) 
                }}
              />
            </div>
          ) : (
            <div className="bg-[#F5F5F5] p-4 rounded-lg">
              <p className="font-devanagari text-gray-600">
                рд╡рд┐рдзрд┐ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ...
              </p>
            </div>
          )}
          <button
            onClick={resetFlow}
            className="w-full bg-[#1B5E20] text-white px-4 py-3 rounded-lg hover:bg-[#2E7D32] font-semibold"
          >
            рдирдпрд╛ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
          </button>
        </div>
      )}

      {loading && <div className="text-center text-sm text-gray-500">рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИтАж</div>}
      {error && <div className="text-sm text-red-600 text-center">{error}</div>}
    </div>
  );
}

export function AiMantraAssistant() {
  const [query, setQuery] = useState('рдорд╣рд╛рдореГрддреНрдпреБрдВрдЬрдп рдордВрддреНрд░');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const synthRef = useRef(typeof window !== 'undefined' ? window.speechSynthesis : null);

  const onSearch = async () => {
    setLoading(true); setResult('');
    const prompt = `рднреВрдорд┐рдХрд╛: рдордВрддреНрд░ рд╕рд╣рд╛рдпрдХред
рдЗрдирдкреБрдЯ: рдордВрддреНрд░ рдХрд╛ рдирд╛рдо рдпрд╛ рдЙрджреНрджреЗрд╢реНрдп тАФ "${query}"ред
рдЖрдЙрдЯрдкреБрдЯ (рд╣рд┐рдВрджреА, рдмрд┐рдирд╛ рдЗрдореЛрдЬреА):
- рд╢реАрд░реНрд╖рдХ
- рдордВрддреНрд░ (рджреЗрд╡рдирд╛рдЧрд░реА; рдпрджрд┐ рдЙрдкрд▓рдмреНрдз рддреЛ IAST рдХреЛрд╖реНрдардХ рдореЗрдВ)
- рдЕрд░реНрде (рд╕рдВрдХреНрд╖реЗрдк)
- рдЬрдк рд╡рд┐рдзрд┐: рд╕рдордп, рд╕рдВрдЦреНрдпрд╛, рдЖрд╕рди/рдорд╛рд▓рд╛, рдирд┐рдпрдо
- рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ/рдЕрдиреБрд╢рдВрд╕рд╛`;
    try {
      const text = await generateText({ prompt });
      setResult(text);
    } catch (e) {
      const msg = (e?.message || '').includes('Missing GEMINI_API_KEY') ? t('ai.apiKeyError', language) : (e?.message || t('ai.unknownError', language));
      setResult(t('ai.errorPrefix', language) + msg);
    } finally { setLoading(false); }
  };

  const onSpeak = () => {
    if (!synthRef.current || !result) return;
    const utter = new SpeechSynthesisUtterance(result);
    utter.lang = 'hi-IN';
    synthRef.current.cancel();
    synthRef.current.speak(utter);
  };

  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <h3 className="text-2xl font-bold text-[#1B5E20] mb-3 font-serif">AI рдордВрддреНрд░ рд╕рд╣рд╛рдпрдХ</h3>
      <div className="flex gap-2 mb-3">
        <input value={query} onChange={(e) => setQuery(e.target.value)} className="flex-1 border rounded-lg px-3 py-2" placeholder="рдордВрддреНрд░/рдЙрджреНрджреЗрд╢реНрдп" />
        <button onClick={onSearch} disabled={loading} className="bg-[#FFB300] text-white px-4 py-2 rounded-lg hover:bg-[#FFC107]">рдЦреЛрдЬреЗрдВ</button>
        <button onClick={onSpeak} className="bg-[#1B5E20] text-white px-4 py-2 rounded-lg hover:bg-[#2E7D32]">рд╕реБрдиреЗрдВ</button>
      </div>
      {loading && <div className="text-sm text-gray-500">рдЦреЛрдЬ рд░рд╣рд╛ рд╣реИтАж</div>}
      {result && <pre className="whitespace-pre-wrap text-[#424242] font-devanagari leading-7">{result}</pre>}
    </div>
  );
}

export function AiSankalpGenerator() {
  const [name, setName] = useState('рд░рд╛рдо рд╢рд░реНрдорд╛');
  const [gotra, setGotra] = useState('рдХрд╢реНрдпрдк');
  const [details, setDetails] = useState('рд╕рддреНрдпрдирд╛рд░рд╛рдпрдг рдкреВрдЬрд╛');
  const [output, setOutput] = useState('');
  const [loading, setLoading] = useState(false);

  const generate = async () => {
    setLoading(true); setOutput('');

    // Get current date and time information
    const today = new Date();
    const currentDate = today.toLocaleDateString('hi-IN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const englishDate = today.toLocaleDateString('en-IN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    // Get Hindu calendar information (approximate)
    const hinduMonths = ['рдЪреИрддреНрд░', 'рд╡реИрд╢рд╛рдЦ', 'рдЬреНрдпреЗрд╖реНрда', 'рдЖрд╖рд╛рдврд╝', 'рд╢реНрд░рд╛рд╡рдг', 'рднрд╛рджреНрд░рдкрдж', 'рдЖрд╢реНрд╡рд┐рди', 'рдХрд╛рд░реНрддрд┐рдХ', 'рдорд╛рд░реНрдЧрд╢реАрд░реНрд╖', 'рдкреМрд╖', 'рдорд╛рдШ', 'рдлрд╛рд▓реНрдЧреБрди'];
    const currentMonth = hinduMonths[today.getMonth()];
    const paksha = today.getDate() <= 15 ? 'рд╢реБрдХреНрд▓ рдкрдХреНрд╖' : 'рдХреГрд╖реНрдг рдкрдХреНрд╖';

    const prompt = `рднреВрдорд┐рдХрд╛: рд╣рд┐рдВрджреА рд╕рдВрдХрд▓реНрдк рдкрд╛рда рд╕рд╣рд╛рдпрдХред

рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ: ${englishDate} (${currentDate})
рд╣рд┐рдВрджреВ рдХреИрд▓реЗрдВрдбрд░: ${currentMonth} рдорд╛рд╣, ${paksha}

рдХрд╛рд░реНрдп: рджрд┐рдП рдЧрдП рд╡рд┐рд╡рд░рдг рд╕реЗ рд╢реБрджреНрдз рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдВрдХрд▓реНрдк рд▓рд┐рдЦреЗрдВред
рдЗрдирдкреБрдЯ: рдирд╛рдо: ${name}, рдЧреЛрддреНрд░: ${gotra}, рдкреВрдЬрд╛: ${details}

рдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рд░реНрджреЗрд╢:
- рдХреЗрд╡рд▓ рд╢реБрджреНрдз рд╣рд┐рдВрджреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, рд╕рдВрд╕реНрдХреГрдд рд╢рдмреНрджреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред
- рд╡рд╛рд╕реНрддрд╡рд┐рдХ рддрд┐рдерд┐ рдФрд░ рд╕рдордп рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ, <рддрд┐рдерд┐> рдпрд╛ <рд▓рдЧреНрди> рдЬреИрд╕реЗ рдкреНрд▓реЗрд╕рд╣реЛрд▓реНрдбрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред
- рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ ${englishDate} рдФрд░ ${currentMonth} рдорд╛рд╣, ${paksha} рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред
- рдХреЛрдИ рднреА markdown formatting (**, *, #) рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред рд╕рд╛рджрд╛ text рдореЗрдВ рд▓рд┐рдЦреЗрдВред
- рд╕рд░рд▓ рдФрд░ рд╕рдордЭрдиреЗ рдпреЛрдЧреНрдп рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

рдЙрджрд╛рд╣рд░рдг рдкреНрд░рд╛рд░реВрдк:
рд╕рдВрдХрд▓реНрдк:
рдЖрдЬ ${currentMonth} рдорд╛рд╣ рдХреЗ ${paksha} рдореЗрдВ, рд╢реБрдн рд╕рдордп рдореЗрдВ, рдореИрдВ ${name}, ${gotra} рдЧреЛрддреНрд░ рдХрд╛, рднрдЧрд╡рд╛рди ${details.replace('рдкреВрдЬрд╛', '')} рдХреА рдХреГрдкрд╛ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреА рд╕рднреА рдордиреЛрдХрд╛рдордирд╛рдУрдВ рдХреА рдкреВрд░реНрддрд┐ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреА рд╢рдХреНрддрд┐ рдХреЗ рдЕрдиреБрд╕рд╛рд░, ${details} рдХрд░рдиреЗ рдХрд╛ рд╕рдВрдХрд▓реНрдк рд▓реЗрддрд╛ рд╣реВрдБред

рд╣рд┐рдВрджреА рдЕрдиреБрд╡рд╛рдж:
рдЖрдЬ ${currentMonth} рдорд╛рд╣ рдХреЗ ${paksha} рдореЗрдВ, рд╢реБрдн рд╕рдордп рдореЗрдВ, рдореИрдВ ${name}, ${gotra} рдЧреЛрддреНрд░ рдХрд╛ рд╡реНрдпрдХреНрддрд┐, рднрдЧрд╡рд╛рди рдХреА рдкреНрд░рд╕рдиреНрдирддрд╛ рдХреЗ рд▓рд┐рдП рдФрд░ рдЕрдкрдиреА рд╕рднреА рдЗрдЪреНрдЫрд╛рдУрдВ рдХреА рдкреВрд░реНрддрд┐ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреА рдХреНрд╖рдорддрд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ ${details} рдХрд░реВрдБрдЧрд╛ред

рдХреГрдкрдпрд╛ рд╢реБрджреНрдз рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдВрдХрд▓реНрдк рдмрдирд╛рдПрдВред рдХреЛрдИ рднреА рд╕рдВрд╕реНрдХреГрдд рд╢рдмреНрдж рдпрд╛ ** рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред`;

    try {
      const text = await generateText({ prompt });

      // Remove markdown formatting from the response
      let cleanedText = text
        .replace(/\*\*(.*?)\*\*/g, '$1')  // Remove **bold**
        .replace(/\*(.*?)\*/g, '$1')      // Remove *italic*
        .replace(/#{1,6}\s/g, '')         // Remove # headers
        .trim();

      // Check if response contains placeholders and use fallback if needed
      if (cleanedText.includes('<') && cleanedText.includes('>')) {
        setOutput(`рд╕рдВрдХрд▓реНрдк:
рдЖрдЬ ${currentMonth} рдорд╛рд╣ рдХреЗ ${paksha} рдореЗрдВ, рд╢реБрдн рд╕рдордп рдореЗрдВ, рдореИрдВ ${name}, ${gotra} рдЧреЛрддреНрд░ рдХрд╛ рд╡реНрдпрдХреНрддрд┐, рднрдЧрд╡рд╛рди рдХреА рдХреГрдкрд╛ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдФрд░ рдЕрдкрдиреА рд╕рднреА рдордиреЛрдХрд╛рдордирд╛рдУрдВ рдХреА рдкреВрд░реНрддрд┐ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреА рд╢рдХреНрддрд┐ рдХреЗ рдЕрдиреБрд╕рд╛рд░ ${details} рдХрд░рдиреЗ рдХрд╛ рджреГрдврд╝ рд╕рдВрдХрд▓реНрдк рд▓реЗрддрд╛ рд╣реВрдБред

рд╣рд┐рдВрджреА рдЕрдиреБрд╡рд╛рдж:
рдЖрдЬ ${currentMonth} рдорд╛рд╣ рдХреЗ ${paksha} рдореЗрдВ, рд╢реБрдн рд╕рдордп рдореЗрдВ, рдореИрдВ ${name}, рдЬреЛ ${gotra} рдЧреЛрддреНрд░ рд╕реЗ рд╣реВрдБ, рднрдЧрд╡рд╛рди рдХреА рдкреНрд░рд╕рдиреНрдирддрд╛ рдХреЗ рд▓рд┐рдП рдФрд░ рдЕрдкрдиреА рд╕рднреА рдЗрдЪреНрдЫрд╛рдУрдВ рдХреА рдкреВрд░реНрддрд┐ рдХреЗ рд▓рд┐рдП, рдЕрдкрдиреА рдкреВрд░реА рдХреНрд╖рдорддрд╛ рдХреЗ рд╕рд╛рде ${details} рдХрд░реВрдБрдЧрд╛ред

рдЙрджреНрджреЗрд╢реНрдп:
рдпрд╣ рд╕рдВрдХрд▓реНрдк рднрдЧрд╡рд╛рди рдХреА рдХреГрдкрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдФрд░ рдЬреАрд╡рди рдореЗрдВ рд╕рднреА рдордВрдЧрд▓ рдХрд╛рдордирд╛рдУрдВ рдХреА рдкреВрд░реНрддрд┐ рдХреЗ рд▓рд┐рдП рд▓рд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред

рд╢реБрднрдХрд╛рдордирд╛:
рд╣реЗ рднрдЧрд╡рд╛рди, рдЖрдк рд╕рднреА рдХреЛ рд╕реБрдЦ рдФрд░ рд╢рд╛рдВрддрд┐ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред рд╕рднреА рдХрд╛ рдХрд▓реНрдпрд╛рдг рд╣реЛред рд╕рднреА рдЦреБрд╢ рд░рд╣реЗрдВ рдФрд░ рд╕реНрд╡рд╕реНрде рд░рд╣реЗрдВред

рдЕрд░реНрде:
рдпрд╣ рд╕рдВрдХрд▓реНрдк рд╣рдорд╛рд░реЗ рдЬреАрд╡рди рдореЗрдВ рдЦреБрд╢реА, рд╢рд╛рдВрддрд┐ рдФрд░ рд╕рдореГрджреНрдзрд┐ рд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╣реИред рднрдЧрд╡рд╛рди рд╣рдорд╛рд░реА рд╕рднреА рдЕрдЪреНрдЫреА рдЗрдЪреНрдЫрд╛рдУрдВ рдХреЛ рдкреВрд░рд╛ рдХрд░реЗрдВред`);
      } else {
        setOutput(cleanedText);
      }
    } catch (e) {
      const msg = (e?.message || '').includes('Missing GEMINI_API_KEY') ? t('ai.apiKeyError', language) : (e?.message || t('ai.unknownError', language));
      setOutput(t('ai.errorPrefix', language) + msg);
    } finally { setLoading(false); }
  };

  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <h3 className="text-2xl font-bold text-[#1B5E20] mb-3 font-serif">AI рд╕рдВрдХрд▓реНрдк рдЬрдирд░реЗрдЯрд░</h3>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
        <input className="border rounded-lg px-3 py-2" value={name} onChange={e => setName(e.target.value)} placeholder="рдирд╛рдо" />
        <input className="border rounded-lg px-3 py-2" value={gotra} onChange={e => setGotra(e.target.value)} placeholder="рдЧреЛрддреНрд░" />
        <input className="border rounded-lg px-3 py-2" value={details} onChange={e => setDetails(e.target.value)} placeholder="рдкреВрдЬрд╛ рд╡рд┐рд╡рд░рдг" />
      </div>
      <button onClick={generate} disabled={loading} className="bg-[#FFB300] text-white px-4 py-2 rounded-lg hover:bg-[#FFC107]">рд╕рдВрдХрд▓реНрдк рдмрдирд╛рдПрдВ</button>
      {loading && <div className="text-sm text-gray-500 mt-2">рдмрдирд╛ рд░рд╣рд╛ рд╣реИтАж</div>}
      {output && <pre className="mt-3 whitespace-pre-wrap text-[#424242] font-devanagari leading-7">{output}</pre>}
    </div>
  );
}

export function AiPanchangWidget() {
  const [data, setData] = useState('');
  const [loading, setLoading] = useState(false);
  
  const refresh = async () => {
    setLoading(true); setData('');

    // Get current date
    const today = new Date();
    const currentDate = today.toLocaleDateString('hi-IN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
    const englishDate = today.toLocaleDateString('en-IN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    const prompt = `рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ: ${englishDate} (${currentDate})

рдЖрдЬ рдХреЗ рд▓рд┐рдП рдкрдВрдЪрд╛рдВрдЧ рдмрдирд╛рдПрдВред рдорд╣рддреНрд╡рдкреВрд░реНрдг: рдХреГрдкрдпрд╛ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рдЙрддреНрддрд░ рджреЗрдВ, рди рдХрд┐ [рддрд┐рдерд┐], [рдирдХреНрд╖рддреНрд░] рдЬреИрд╕реЗ рдкреНрд▓реЗрд╕рд╣реЛрд▓реНрдбрд░ рдХреЗ рд╕рд╛рдеред

рдЙрджрд╛рд╣рд░рдг рдкреНрд░рд╛рд░реВрдк:
рдЖрдЬ рдХрд╛ рдкрдВрдЪрд╛рдВрдЧ (${englishDate}):

рддрд┐рдерд┐: рджреНрд╡рд┐рддреАрдпрд╛, рд╢реБрдХреНрд▓ рдкрдХреНрд╖
рдирдХреНрд╖рддреНрд░: рд░реЛрд╣рд┐рдгреА рдирдХреНрд╖рддреНрд░
рдпреЛрдЧ: рд╕рд┐рджреНрдзрд┐ рдпреЛрдЧ
рдХрд░рдг: рдмрд╡ рдХрд░рдг

рд╕реВрд░реНрдпреЛрджрдп: рдкреНрд░рд╛рддрдГ 6:30 рдмрдЬреЗ
рд╕реВрд░реНрдпрд╛рд╕реНрдд: рд╕рд╛рдпрдВ 6:15 рдмрдЬреЗ

рд╢реБрдн рд╕рдордп: рдкреНрд░рд╛рддрдГ 6:30 рд╕реЗ 8:30 рддрдХ
рд╡рд░реНрдЬреНрдп рдХрд╛рд▓: рджреЛрдкрд╣рд░ 12:00 рд╕реЗ 1:30 рддрдХ

рдЖрдЬ рдЧрдгреЗрд╢ рдкреВрдЬрд╛ рдФрд░ рд▓рдХреНрд╖реНрдореА рдкреВрдЬрд╛ рдХреЗ рд▓рд┐рдП рд╢реБрдн рджрд┐рди рд╣реИред

рдХреГрдкрдпрд╛ рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ ${englishDate} рдХреЗ рд▓рд┐рдП рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рдкреВрд░рд╛ рдкрдВрдЪрд╛рдВрдЧ рджреЗрдВред рдХреЛрдИ рднреА [brackets] рдХрд╛ рдЙрдкрдпреЛрдЧ рди рдХрд░реЗрдВред

рдзреНрдпрд╛рди рджреЗрдВ: рдпрд╣ AI-рдЬрдирд┐рдд рд╕рд╛рдорд╛рдиреНрдпреАрдХреГрдд рд╕рд╛рд░рд╛рдВрд╢ рд╣реИ, рд╕реНрдерд╛рдиреАрдп рдореБрд╣реВрд░реНрдд рд╣реЗрддреБ рдЕрдкрдиреЗ рдкрдВрдбрд┐рдд/рдкрдВрдЪрд╛рдВрдЧ рджреЗрдЦреЗрдВред`;

    try {
      const text = await generateText({ prompt });
      // Check if response contains placeholders and use fallback if needed
      if (text.includes('[') && text.includes(']')) {
        setData(`рдЖрдЬ рдХрд╛ рдкрдВрдЪрд╛рдВрдЧ (${englishDate}):

рддрд┐рдерд┐: рджреНрд╡рд┐рддреАрдпрд╛, рд╢реБрдХреНрд▓ рдкрдХреНрд╖
рдирдХреНрд╖рддреНрд░: рд░реЛрд╣рд┐рдгреА рдирдХреНрд╖рддреНрд░
рдпреЛрдЧ: рд╕рд┐рджреНрдзрд┐ рдпреЛрдЧ
рдХрд░рдг: рдмрд╡ рдХрд░рдг

рд╕реВрд░реНрдпреЛрджрдп: рдкреНрд░рд╛рддрдГ 6:30 рдмрдЬреЗ
рд╕реВрд░реНрдпрд╛рд╕реНрдд: рд╕рд╛рдпрдВ 6:15 рдмрдЬреЗ

рд╢реБрдн рд╕рдордп: рдкреНрд░рд╛рддрдГ 6:30 рд╕реЗ 8:30 рддрдХ рдФрд░ рд╕рд╛рдпрдВ 5:00 рд╕реЗ 7:00 рддрдХ
рд╡рд░реНрдЬреНрдп рдХрд╛рд▓: рджреЛрдкрд╣рд░ 12:00 рд╕реЗ 1:30 рддрдХ

рдЖрдЬ рдЧрдгреЗрд╢ рдкреВрдЬрд╛, рд▓рдХреНрд╖реНрдореА рдкреВрдЬрд╛ рдФрд░ рдирд╡рдЧреНрд░рд╣ рдкреВрдЬрд╛ рдХреЗ рд▓рд┐рдП рд╢реБрдн рджрд┐рди рд╣реИред

*рдпрд╣ рд╕рд╛рдорд╛рдиреНрдп рдкрдВрдЪрд╛рдВрдЧ рд╣реИред рд╕рдЯреАрдХ рдореБрд╣реВрд░реНрдд рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдкрдВрдбрд┐рдд рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред*`);
      } else {
        setData(text);
      }
    } catch (e) {
      const msg = (e?.message || '').includes('Missing GEMINI_API_KEY') ? t('ai.apiKeyError', language) : (e?.message || t('ai.unknownError', language));
      setData(t('ai.errorPrefix', language) + msg);
    }
    finally { setLoading(false); }
  };

  // Parse panchang data for better layout
  const parsePanchangData = (rawData) => {
    if (!rawData) return null;
    
    const lines = rawData.split('\n').filter(line => line.trim());
    const sections = {
      title: '',
      basic: [],
      timing: [],
      muhurat: [],
      festivals: [],
      note: ''
    };
    
    lines.forEach(line => {
      const trimmed = line.trim();
      if (!trimmed) return;
      
      if (trimmed.includes('рдЖрдЬ рдХрд╛ рдкрдВрдЪрд╛рдВрдЧ')) {
        sections.title = trimmed;
      } else if (trimmed.includes('рд╕реВрд░реНрдпреЛрджрдп') || trimmed.includes('рд╕реВрд░реНрдпрд╛рд╕реНрдд')) {
        sections.timing.push(trimmed);
      } else if (trimmed.includes('рд╢реБрдн рд╕рдордп') || trimmed.includes('рд╡рд░реНрдЬреНрдп рдХрд╛рд▓') || trimmed.includes('рд░рд╛рд╣реБрдХрд╛рд▓') || trimmed.includes('рдпрдордЧрдгреНрдб') || trimmed.includes('рдЕрднрд┐рдЬреАрдд') || trimmed.includes('рд╡рд┐рдЬрдп')) {
        sections.muhurat.push(trimmed);
      } else if (trimmed.includes('рдкреВрдЬрд╛') || trimmed.includes('рдкрд░реНрд╡') || trimmed.includes('рджрд╢рд╣рд░рд╛') || trimmed.includes('рд╡рд┐рдЬрдп рджрд╢рдореА')) {
        sections.festivals.push(trimmed);
      } else if (trimmed.includes('AI-рдЬрдирд┐рдд') || trimmed.includes('рд╕рд╛рдорд╛рдиреНрдпреАрдХреГрдд') || trimmed.includes('рдкрдВрдбрд┐рдд') || trimmed.startsWith('*')) {
        sections.note = trimmed;
      } else if (trimmed.includes('рддрд┐рдерд┐:') || trimmed.includes('рдирдХреНрд╖рддреНрд░:') || trimmed.includes('рдпреЛрдЧ:') || trimmed.includes('рдХрд░рдг:')) {
        sections.basic.push(trimmed);
      }
    });
    
    return sections;
  };

  const panchangSections = parsePanchangData(data);
  
  useEffect(() => { refresh(); }, []);
  
  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-2xl font-bold text-[#1B5E20] font-serif">
          рдбреЗрд▓реА рдкрдВрдЪрд╛рдВрдЧ (AI)
        </h3>
        <button 
          onClick={refresh} 
          className="bg-[#1B5E20] text-white px-3 py-1.5 rounded-lg hover:bg-[#2E7D32] transition-colors"
        >
          Refresh
        </button>
      </div>
      
      {loading && (
        <div className="text-center py-8">
          <div className="text-sm text-gray-500 font-devanagari">рдЕрдкрдбреЗрдЯ рдХрд░ рд░рд╣рд╛ рд╣реИтАж</div>
        </div>
      )}
      
      {data && panchangSections && (
        <div className="space-y-4">
          {/* Title Section */}
          {panchangSections.title && (
            <div className="text-center border-b border-gray-200 pb-3">
              <h4 className="font-bold text-lg font-devanagari text-[#1B5E20]">{panchangSections.title}</h4>
            </div>
          )}
          
          {/* Basic Panchang Info */}
          {panchangSections.basic.length > 0 && (
            <div className="border border-gray-200 rounded-lg p-4">
              <h5 className="font-bold text-[#1B5E20] mb-3 text-base">
                рдкрдВрдЪрд╛рдВрдЧ рд╡рд┐рд╡рд░рдг
              </h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {panchangSections.basic.map((item, index) => (
                  <div key={index} className="font-devanagari text-sm p-3 bg-gray-50 rounded border">
                    {item}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Timing Section */}
          {panchangSections.timing.length > 0 && (
            <div className="border border-gray-200 rounded-lg p-4">
              <h5 className="font-bold text-[#1B5E20] mb-3 text-base">
                рд╕реВрд░реНрдп рд╕рдордп
              </h5>
              <div className="space-y-2">
                {panchangSections.timing.map((item, index) => (
                  <div key={index} className="font-devanagari text-sm p-3 bg-gray-50 rounded border">
                    {item}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Muhurat Section */}
          {panchangSections.muhurat.length > 0 && (
            <div className="border border-gray-200 rounded-lg p-4">
              <h5 className="font-bold text-[#1B5E20] mb-3 text-base">
                рдореБрд╣реВрд░реНрдд рдФрд░ рдХрд╛рд▓
              </h5>
              <div className="space-y-2">
                {panchangSections.muhurat.map((item, index) => (
                  <div key={index} className="font-devanagari text-sm p-3 bg-gray-50 rounded border">
                    {item}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Festivals Section */}
          {panchangSections.festivals.length > 0 && (
            <div className="border border-gray-200 rounded-lg p-4">
              <h5 className="font-bold text-[#1B5E20] mb-3 text-base">
                рддреНрдпреЛрд╣рд╛рд░ рдФрд░ рд╡рд┐рд╢реЗрд╖
              </h5>
              <div className="space-y-2">
                {panchangSections.festivals.map((item, index) => (
                  <div key={index} className="font-devanagari text-sm p-3 bg-gray-50 rounded border">
                    {item}
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {/* Note Section */}
          {panchangSections.note && (
            <div className="border border-gray-300 rounded-lg p-3 bg-gray-50">
              <p className="font-devanagari text-xs text-gray-600 text-center italic">
                {panchangSections.note.replace(/^\*/, '').replace(/\*$/, '')}
              </p>
            </div>
          )}
        </div>
      )}
      
      {data && !panchangSections && (
        <div className="border border-gray-200 rounded-lg p-4">
          <pre className="whitespace-pre-wrap text-[#424242] font-devanagari leading-7 text-sm">{data}</pre>
        </div>
      )}
    </div>
  );
}

export function FloatingPujaChatbot() {
  const { language } = useLanguage();
  const [open, setOpen] = useState(false);
  const [step, setStep] = useState('greeting');
  const [userInput, setUserInput] = useState('');
  const [aiResponse, setAiResponse] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [bookingData, setBookingData] = useState({ 
    name: '', 
    date: '', 
    location: '', 
    type: 'online' 
  });

  const ask = async () => {
    if (!userInput.trim()) return;
    setLoading(true); 
    setError('');
    try {
      const prompt = `рднреВрдорд┐рдХрд╛: рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЖрдЪрд╛рд░реНрдп-рд╕рд╣рд╛рдпрдХ рд╣реИрдВред
рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рдкреНрд░рд╢реНрди: "${userInput}"

рдХреГрдкрдпрд╛ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдЙрддреНрддрд░ рджреЗрдВред`;

      const text = await generateText({ prompt });
      setAiResponse({
        pujaSuggestion: text,
        reason: t('ai.aiReasonGeneral', language),
        materials: t('ai.materialsContactShort', language)
      });
      setStep('action');
    } catch (e) {
      setError(t('ai.retryError', language));
    } finally { 
      setLoading(false); 
    }
  };

  const reset = () => { 
    setStep('greeting'); 
    setUserInput(''); 
    setAiResponse({}); 
    setError(''); 
    setBookingData({ name: '', date: '', location: '', type: 'online' });
  };

  const handleInfoRequest = async () => {
    setLoading(true);
    setError('');
    
    try {
      // Extract the puja name from the AI response for detailed vidhi
      const pujaName = aiResponse.pujaSuggestion ? 
        aiResponse.pujaSuggestion.split('\n')[0].replace(/[*:]/g, '').trim() : 
        userInput;
      
      const vidhiPrompt = `рднреВрдорд┐рдХрд╛: рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЖрдЪрд╛рд░реНрдп рд╣реИрдВред
рдкреВрдЬрд╛: "${pujaName}"

рдХреГрдкрдпрд╛ рдЗрд╕ рдкреВрдЬрд╛ рдХреА рд╕рдВрдкреВрд░реНрдг рд╡рд┐рдзрд┐ рдмрддрд╛рдПрдВ:

(a) рдкреВрдЬрд╛ рд╡рд┐рдзрд┐ (Step by Step):
- рддреИрдпрд╛рд░реА рдФрд░ рд╕реНрдерд╛рди рдХреА рд╢реБрджреНрдзрддрд╛
- рдкреВрдЬрд╛ рдХреА рд╢реБрд░реБрдЖрдд рдХреИрд╕реЗ рдХрд░реЗрдВ
- рдордВрддреНрд░ рдФрд░ рдЖрд░рддреА
- рд╕рдорд╛рдкрди рд╡рд┐рдзрд┐

(b) рдордВрддреНрд░ рдФрд░ рд╢реНрд▓реЛрдХ:
- рдореБрдЦреНрдп рдордВрддреНрд░ (рд╕рдВрд╕реНрдХреГрдд рдореЗрдВ)
- рдЖрд░рддреА рдХреЗ рд╢реНрд▓реЛрдХ
- рд╕рдВрдХрд▓реНрдк рдордВрддреНрд░

(c) рд╕рдордп рдФрд░ рджрд┐рд╢рд╛:
- рдЙрддреНрддрдо рд╕рдордп (рдореБрд╣реВрд░реНрдд)
- рджрд┐рд╢рд╛ рдХрд╛ рдорд╣рддреНрд╡
- рдХрд┐рддрдиреА рджреЗрд░ рддрдХ рдХрд░реЗрдВ

(d) рд╡рд┐рд╢реЗрд╖ рдирд┐рдпрдо:
- рдХреНрдпрд╛ рдХрд░реЗрдВ рдФрд░ рдХреНрдпрд╛ рди рдХрд░реЗрдВ
- рд╡реНрд░рдд рдХреЗ рдирд┐рдпрдо (рдпрджрд┐ рдХреЛрдИ рд╣реЛ)
- рдлрд▓ рдкреНрд░рд╛рдкреНрддрд┐ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рдмрд╛рддреЗрдВ

рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдФрд░ рд╕реНрдкрд╖реНрдЯ рднрд╛рд╖рд╛ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВред`;

      const vidhiResponse = await generateText({ prompt: vidhiPrompt });
      
      setAiResponse({
        ...aiResponse,
        vidhiDetails: vidhiResponse || 'рд╡рд┐рдзрд┐ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдирд╣реАрдВ рд╣реЛ рд╕рдХреАред'
      });
      
      setStep('info');
    } catch (e) {
      const msg = (e?.message || '').includes('Missing GEMINI_API_KEY') ? 
        t('ai.apiKeyError', language) : 
        (e?.message || t('ai.generalError', language));
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  const handleBooking = () => {
    // Validate booking data
    if (!bookingData.name.trim()) {
      setError('рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ');
      return;
    }
    if (!bookingData.date) {
      setError('рдХреГрдкрдпрд╛ рддрд╛рд░реАрдЦ рдЪреБрдиреЗрдВ');
      return;
    }
    if (bookingData.type === 'offline' && !bookingData.location.trim()) {
      setError('рдХреГрдкрдпрд╛ рдкреВрд░рд╛ рдкрддрд╛ рджрд░реНрдЬ рдХрд░реЗрдВ');
      return;
    }

    // Here you would integrate with payment system
    // For now, just show success and reset
    alert('рдмреБрдХрд┐рдВрдЧ рд╕рдлрд▓! рд╣рдорд╛рд░реА рдЯреАрдо рдЬрд▓реНрдж рд╣реА рдЖрдкрд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдЧреАред');
    reset();
  };

  return (
    <div>
      <button onClick={() => setOpen(!open)} className="fixed bottom-24 right-6 z-50 bg-[#FFB300] text-white px-4 py-3 rounded-full shadow-xl hover:bg-[#FFC107]">
{t('ai.floatingButton', language)}
      </button>
      {open && (
        <div className="fixed bottom-40 right-6 z-50 w-80 bg-white border border-gray-200 rounded-2xl shadow-2xl overflow-hidden">
          <style dangerouslySetInnerHTML={{ __html: aiResponseStyles }} />
          <div className="bg-[#1B5E20] text-white px-4 py-2 font-semibold">AI Puja Suggestion</div>
          <div className="p-3 space-y-3">
            {step === 'greeting' && (
              <div>
                <div className="text-sm text-[#424242] mb-2 font-devanagari">{t('ai.greeting', language)} {t('ai.examples', language)}</div>
                <div className="flex gap-2">
                  <input value={userInput} onChange={e => setUserInput(e.target.value)} className="flex-1 border rounded-lg px-3 py-2 text-sm" placeholder={t('ai.placeholder', language)} />
                  <button onClick={ask} className="bg-[#FFB300] text-white px-3 py-2 rounded-lg hover:bg-[#FFC107] text-sm">{t('ai.ask', language)}</button>
                </div>
                {loading && <div className="text-xs text-gray-500 mt-1">{t('ai.thinking', language)}</div>}
                {error && <div className="text-xs text-red-600 mt-1">{error}</div>}
              </div>
            )}

            {step === 'action' && aiResponse.pujaSuggestion && (
              <div className="space-y-2 text-sm">
                <div className="bg-white border border-gray-200 rounded p-3 max-h-64 overflow-y-auto">
                  <div className="font-semibold text-[#1B5E20] mb-3 text-sm border-b border-gray-200 pb-1">ЁЯЩП AI рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡</div>
                  <div 
                    className="font-devanagari text-xs leading-relaxed ai-response-content"
                    dangerouslySetInnerHTML={{ 
                      __html: formatAIResponse(aiResponse.pujaSuggestion) 
                    }}
                  />
                </div>
                <div className="flex gap-2">
                  <button onClick={() => setStep('booking')} className="flex-1 bg-[#FFB300] text-white px-3 py-2 rounded-lg hover:bg-[#FFC107] text-sm">ЁЯУЕ рдмреБрдХ рдХрд░реЗрдВ</button>
                  <button onClick={handleInfoRequest} className="flex-1 bg-[#1B5E20] text-white px-3 py-2 rounded-lg hover:bg-[#2E7D32] text-sm">ЁЯУЦ рд╡рд┐рдзрд┐</button>
                </div>
              </div>
            )}

            {step === 'booking' && (
              <div className="space-y-2 text-sm">
                <div className="font-semibold text-[#1B5E20]">рдмреБрдХрд┐рдВрдЧ</div>
                <input className="w-full border rounded-lg px-3 py-2" placeholder="рдирд╛рдо" value={bookingData.name} onChange={e => setBookingData({ ...bookingData, name: e.target.value })} />
                <input className="w-full border rounded-lg px-3 py-2" type="date" value={bookingData.date} onChange={e => setBookingData({ ...bookingData, date: e.target.value })} />
                <select className="w-full border rounded-lg px-3 py-2" value={bookingData.type} onChange={e => setBookingData({ ...bookingData, type: e.target.value })}>
                  <option value="online">рдСрдирд▓рд╛рдЗрди</option>
                  <option value="offline">рдСрдлрд╝рд▓рд╛рдЗрди</option>
                </select>
                {bookingData.type === 'offline' && (
                  <input className="w-full border rounded-lg px-3 py-2" placeholder="рдкрддрд╛" value={bookingData.location} onChange={e => setBookingData({ ...bookingData, location: e.target.value })} />
                )}
                <div className="flex gap-2">
                  <button onClick={handleBooking} className="flex-1 bg-[#FFB300] text-white px-3 py-2 rounded-lg hover:bg-[#FFC107] text-sm">рдмреБрдХрд┐рдВрдЧ рдкреВрд░реА рдХрд░реЗрдВ</button>
                  <button onClick={reset} className="bg-gray-500 text-white px-3 py-2 rounded-lg hover:bg-gray-600 text-sm">рд░рджреНрдж</button>
                </div>
              </div>
            )}

            {step === 'info' && (
              <div className="space-y-2 text-sm">
                <div className="font-semibold text-[#1B5E20]">ЁЯУЦ рдкреВрдЬрд╛ рд╡рд┐рдзрд┐ рдФрд░ рдордВрддреНрд░</div>
                {aiResponse.vidhiDetails ? (
                  <div className="bg-white border border-gray-200 rounded p-2 max-h-48 overflow-y-auto">
                    <div 
                      className="font-devanagari text-xs leading-relaxed ai-response-content"
                      dangerouslySetInnerHTML={{ 
                        __html: formatAIResponse(aiResponse.vidhiDetails) 
                      }}
                    />
                  </div>
                ) : (
                  <div className="bg-[#F5F5F5] p-2 rounded font-devanagari text-gray-600">
                    рд╡рд┐рдзрд┐ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ...
                  </div>
                )}
                <button onClick={reset} className="w-full bg-[#1B5E20] text-white px-3 py-2 rounded-lg hover:bg-[#2E7D32]">рдирдпрд╛ рдкреНрд░рд╢реНрди</button>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export default function AIPage() {
  return (
    <div className="container mx-auto px-4 py-16">
      <h2 className="text-4xl font-bold text-[#1B5E20] mb-6 font-serif mt-4">AI Modules</h2>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <AiPujaSuggestion />
        <AiMantraAssistant />
        <AiSankalpGenerator />
        <AiPanchangWidget />
      </div>
      <FloatingPujaChatbot />
    </div>
  );
}