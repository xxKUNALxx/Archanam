import React, { useEffect, useMemo, useRef, useState } from 'react';
import { generateText, chatStream } from '../services/gemini';

export function AiPujaSuggestion() {
  const [step, setStep] = useState('greeting'); // greeting, user-input, ai-response, action, booking, info
  const [userInput, setUserInput] = useState('');
  const [aiResponse, setAiResponse] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [bookingData, setBookingData] = useState({ name: '', date: '', location: '', type: 'online' });

  const handleUserInput = async () => {
    if (!userInput.trim()) return;

    setLoading(true); setError('');
    try {
      const prompt = `рднреВрдорд┐рдХрд╛: рдЖрдк рдПрдХ рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЖрдЪрд╛рд░реНрдп-рд╕рд╣рд╛рдпрдХ рд╣реИрдВред
рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рдкреНрд░рд╢реНрди: "${userInput}"

рдЖрдкрдХреЛ рддреАрди рднрд╛рдЧреЛрдВ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдирд╛ рд╣реИ:

(a) рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡:
- 1-2 рдЙрдкрдпреБрдХреНрдд рдкреВрдЬрд╛рдПрдБ рд╕реБрдЭрд╛рдПрдБ
- рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг рдмрддрд╛рдПрдБ

(b) рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг:
- рдХреНрдпреЛрдВ рдпрд╣ рдкреВрдЬрд╛ рдЙрдкрдпреБрдХреНрдд рд╣реИ
- рдХреНрдпрд╛ рд▓рд╛рдн рдорд┐рд▓реЗрдЧрд╛

(c) рд╕рд╛рдордЧреНрд░реА рд╕реВрдЪреА:
- рдкреВрдЬрд╛ рд╕рд╛рдордЧреНрд░реА рдХреА рд╕реВрдЪреА (5-7 рдЖрдЗрдЯрдо)

рдЙрддреНрддрд░ рдкреНрд░рд╛рд░реВрдк:
рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡: [рдкреВрдЬрд╛ рдХрд╛ рдирд╛рдо]
рдХрд╛рд░рдг: [рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг]
рд╕рд╛рдордЧреНрд░реА: [рд╕рд╛рдордЧреНрд░реА рд╕реВрдЪреА]`;
      
      const text = await generateText({ prompt });
      
      // Parse the response to extract different parts
      const lines = text.split('\n');
      let pujaSuggestion = '';
      let reason = '';
      let materials = '';
      
      lines.forEach(line => {
        if (line.includes('рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡:') || line.includes('рд╕реБрдЭрд╛рд╡:')) {
          pujaSuggestion = line.replace(/рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡:|рд╕реБрдЭрд╛рд╡:/, '').trim();
        } else if (line.includes('рдХрд╛рд░рдг:')) {
          reason = line.replace('рдХрд╛рд░рдг:', '').trim();
        } else if (line.includes('рд╕рд╛рдордЧреНрд░реА:')) {
          materials = line.replace('рд╕рд╛рдордЧреНрд░реА:', '').trim();
        }
      });
      
      setAiResponse({
        pujaSuggestion: pujaSuggestion || text,
        reason: reason || 'рдкрд╛рд░рдВрдкрд░рд┐рдХ рд╡реИрджрд┐рдХ рд╡рд┐рдзрд┐ рд╕реЗ рд╢реБрдн рдлрд▓ рдкреНрд░рд╛рдкреНрдд рд╣реЛрддреЗ рд╣реИрдВред',
        materials: materials || 'рдкреВрдЬрд╛ рдХреА рд╕рд╛рдордЧреНрд░реА рдкрдВрдбрд┐рддрдЬреА рджреНрд╡рд╛рд░рд╛ рдЙрдкрд▓рдмреНрдз рдХрд░рд╛рдИ рдЬрд╛рдПрдЧреАред'
      });
      
      setStep('action');
    } catch (e) {
      const msg = (e?.message || '').includes('Missing VITE_GEMINI_API_KEY') ? 'API рдХреБрдВрдЬреА рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИред .env рдореЗрдВ VITE_GEMINI_API_KEY рд╕реЗрдЯ рдХрд░реЗрдВред' : (e?.message || 'рддреНрд░реБрдЯрд┐ рд╣реБрдИ');
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  const handleBooking = () => {
    // Here you would integrate with payment system
    alert('рдмреБрдХрд┐рдВрдЧ рд╕рдлрд▓! рд╣рдорд╛рд░реА рдЯреАрдо рдЬрд▓реНрдж рд╣реА рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдЧреАред');
    setStep('greeting');
    setUserInput('');
    setAiResponse({});
  };

  const handleInfoRequest = () => {
    setStep('info');
  };

  const resetFlow = () => {
    setStep('greeting');
    setUserInput('');
    setAiResponse({});
    setError('');
  };

  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <h3 className="text-2xl font-bold text-[#1B5E20] mb-4 font-serif">ЁЯХЙ AI рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡</h3>
      
      {step === 'greeting' && (
        <div className="text-center">
          <div className="text-4xl mb-4">ЁЯЩП</div>
          <p className="text-lg text-[#424242] mb-6 font-devanagari">
            рдирдорд╕реНрддреЗ!<br/>
            рдХреГрдкрдпрд╛ рдмрддрд╛рдЗрдП рдЖрдкрдХреЛ рдХрд┐рд╕ рд╡рд┐рд╖рдп рдореЗрдВ рдкреВрдЬрд╛ рдХрд╛ рд╕реБрдЭрд╛рд╡ рдЪрд╛рд╣рд┐рдП?<br/>
            <span className="text-sm text-gray-600">(рдЙрджрд╛рд╣рд░рдг: рдХрд░рд┐рдпрд░, рд╕реНрд╡рд╛рд╕реНрдереНрдп, рд╡рд┐рд╡рд╛рд╣, рд╢рд╛рдВрддрд┐, рд╕рдВрддрд╛рди, рд╢рд┐рдХреНрд╖рд╛, рдзрди рдЖрджрд┐)</span>
          </p>
          <div className="flex gap-2">
            <input 
              value={userInput} 
              onChange={(e) => setUserInput(e.target.value)} 
              className="flex-1 border rounded-lg px-3 py-2" 
              placeholder="рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд▓рд┐рдЦреЗрдВ..." 
            />
            <button 
              onClick={handleUserInput} 
              disabled={loading} 
              className="bg-[#FFB300] text-white px-4 py-2 rounded-lg hover:bg-[#FFC107]"
            >
              рдкреВрдЫреЗрдВ
            </button>
          </div>
        </div>
      )}

      {step === 'action' && aiResponse.pujaSuggestion && (
        <div className="space-y-4">
          <div className="bg-[#F5F5F5] p-4 rounded-lg">
            <h4 className="font-bold text-[#1B5E20] mb-2">рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡:</h4>
            <p className="font-devanagari">{aiResponse.pujaSuggestion}</p>
          </div>
          
          <div className="bg-[#F5F5F5] p-4 rounded-lg">
            <h4 className="font-bold text-[#1B5E20] mb-2">рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг:</h4>
            <p className="font-devanagari">{aiResponse.reason}</p>
          </div>
          
          <div className="bg-[#F5F5F5] p-4 rounded-lg">
            <h4 className="font-bold text-[#1B5E20] mb-2">рдкреВрдЬрд╛ рд╕рд╛рдордЧреНрд░реА:</h4>
            <p className="font-devanagari">{aiResponse.materials}</p>
          </div>
          
          <div className="flex gap-3 mt-6">
            <button 
              onClick={handleBooking}
              className="flex-1 bg-[#FFB300] text-white px-4 py-3 rounded-lg hover:bg-[#FFC107] font-semibold"
            >
              ЁЯУЕ рдкреВрдЬрд╛ рдмреБрдХ рдХрд░реЗрдВ
            </button>
            <button 
              onClick={handleInfoRequest}
              className="flex-1 bg-[#1B5E20] text-white px-4 py-3 rounded-lg hover:bg-[#2E7D32] font-semibold"
            >
              ЁЯУЦ рдкреВрд░реА рд╡рд┐рдзрд┐ рджреЗрдЦреЗрдВ
            </button>
          </div>
        </div>
      )}

      {step === 'booking' && (
        <div className="space-y-4">
          <h4 className="text-xl font-bold text-[#1B5E20]">рдкреВрдЬрд╛ рдмреБрдХрд┐рдВрдЧ</h4>
          <div className="grid grid-cols-1 gap-3">
            <input 
              value={bookingData.name}
              onChange={(e) => setBookingData({...bookingData, name: e.target.value})}
              className="border rounded-lg px-3 py-2" 
              placeholder="рдЖрдкрдХрд╛ рдирд╛рдо" 
            />
            <input 
              type="date"
              value={bookingData.date}
              onChange={(e) => setBookingData({...bookingData, date: e.target.value})}
              className="border rounded-lg px-3 py-2" 
            />
            <select 
              value={bookingData.type}
              onChange={(e) => setBookingData({...bookingData, type: e.target.value})}
              className="border rounded-lg px-3 py-2"
            >
              <option value="online">рдСрдирд▓рд╛рдЗрди рдкреВрдЬрд╛</option>
              <option value="offline">рдШрд░ рдкрд░ рдкреВрдЬрд╛</option>
            </select>
            {bookingData.type === 'offline' && (
              <input 
                value={bookingData.location}
                onChange={(e) => setBookingData({...bookingData, location: e.target.value})}
                className="border rounded-lg px-3 py-2" 
                placeholder="рдкреВрд░рд╛ рдкрддрд╛" 
              />
            )}
          </div>
          <div className="flex gap-3">
            <button 
              onClick={handleBooking}
              className="flex-1 bg-[#FFB300] text-white px-4 py-3 rounded-lg hover:bg-[#FFC107] font-semibold"
            >
              рдмреБрдХрд┐рдВрдЧ рдкреВрд░реА рдХрд░реЗрдВ
            </button>
            <button 
              onClick={resetFlow}
              className="bg-gray-500 text-white px-4 py-3 rounded-lg hover:bg-gray-600"
            >
              рд░рджреНрдж рдХрд░реЗрдВ
            </button>
          </div>
        </div>
      )}

      {step === 'info' && (
        <div className="space-y-4">
          <h4 className="text-xl font-bold text-[#1B5E20]">рдкреВрдЬрд╛ рд╡рд┐рдзрд┐ рдФрд░ рдордВрддреНрд░</h4>
          <div className="bg-[#F5F5F5] p-4 rounded-lg">
            <p className="font-devanagari">
              <strong>рд╡рд┐рдзрд┐:</strong> рд╕реБрдмрд╣ рд╕реНрдирд╛рди рдХрд░рдХреЗ рдкреВрдЬрд╛ рд╕реНрдерд▓ рдХреЛ рд╕рд╛рдл рдХрд░реЗрдВред рджреАрдкрдХ рдЬрд▓рд╛рдХрд░ рдкреВрдЬрд╛ рдЖрд░рдВрдн рдХрд░реЗрдВред<br/>
              <strong>рдордВрддреНрд░:</strong> "реР рдЧрдгреЗрд╢рд╛рдп рдирдордГ" (рдЧрдгреЗрд╢ рдкреВрдЬрд╛ рдХреЗ рд▓рд┐рдП)<br/>
              <strong>рд╕рдордп:</strong> рд╕реБрдмрд╣ 6-8 рдмрдЬреЗ рдпрд╛ рд╢рд╛рдо 6-8 рдмрдЬреЗ<br/>
              <strong>рджрд┐рди:</strong> рдордВрдЧрд▓рд╡рд╛рд░ рдпрд╛ рдЧреБрд░реБрд╡рд╛рд░ рд╢реБрдн рдорд╛рдиреЗ рдЬрд╛рддреЗ рд╣реИрдВ
            </p>
          </div>
          <button 
            onClick={resetFlow}
            className="w-full bg-[#1B5E20] text-white px-4 py-3 rounded-lg hover:bg-[#2E7D32] font-semibold"
          >
            рдирдпрд╛ рдкреНрд░рд╢реНрди рдкреВрдЫреЗрдВ
          </button>
      </div>
      )}

      {loading && <div className="text-center text-sm text-gray-500">рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИтАж</div>}
      {error && <div className="text-sm text-red-600 text-center">{error}</div>}
    </div>
  );
}

export function AiMantraAssistant() {
  const [query, setQuery] = useState('рдорд╣рд╛рдореГрддреНрдпреБрдВрдЬрдп рдордВрддреНрд░');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const synthRef = useRef(typeof window !== 'undefined' ? window.speechSynthesis : null);

  const onSearch = async () => {
    setLoading(true); setResult('');
    const prompt = `рднреВрдорд┐рдХрд╛: рдордВрддреНрд░ рд╕рд╣рд╛рдпрдХред
рдЗрдирдкреБрдЯ: рдордВрддреНрд░ рдХрд╛ рдирд╛рдо рдпрд╛ рдЙрджреНрджреЗрд╢реНрдп тАФ "${query}"ред
рдЖрдЙрдЯрдкреБрдЯ (рд╣рд┐рдВрджреА, рдмрд┐рдирд╛ рдЗрдореЛрдЬреА):
- рд╢реАрд░реНрд╖рдХ
- рдордВрддреНрд░ (рджреЗрд╡рдирд╛рдЧрд░реА; рдпрджрд┐ рдЙрдкрд▓рдмреНрдз рддреЛ IAST рдХреЛрд╖реНрдардХ рдореЗрдВ)
- рдЕрд░реНрде (рд╕рдВрдХреНрд╖реЗрдк)
- рдЬрдк рд╡рд┐рдзрд┐: рд╕рдордп, рд╕рдВрдЦреНрдпрд╛, рдЖрд╕рди/рдорд╛рд▓рд╛, рдирд┐рдпрдо
- рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ/рдЕрдиреБрд╢рдВрд╕рд╛`;
    try {
      const text = await generateText({ prompt });
      setResult(text);
    } catch (e) {
      const msg = (e?.message || '').includes('Missing VITE_GEMINI_API_KEY') ? 'API рдХреБрдВрдЬреА рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИред .env рдореЗрдВ VITE_GEMINI_API_KEY рд╕реЗрдЯ рдХрд░реЗрдВред' : (e?.message || 'рдЕрдЬреНрдЮрд╛рдд');
      setResult('рддреНрд░реБрдЯрд┐: ' + msg);
    } finally { setLoading(false); }
  };

  const onSpeak = () => {
    if (!synthRef.current || !result) return;
    const utter = new SpeechSynthesisUtterance(result);
    utter.lang = 'hi-IN';
    synthRef.current.cancel();
    synthRef.current.speak(utter);
  };

  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <h3 className="text-2xl font-bold text-[#1B5E20] mb-3 font-serif">AI рдордВрддреНрд░ рд╕рд╣рд╛рдпрдХ</h3>
      <div className="flex gap-2 mb-3">
        <input value={query} onChange={(e)=>setQuery(e.target.value)} className="flex-1 border rounded-lg px-3 py-2" placeholder="рдордВрддреНрд░/рдЙрджреНрджреЗрд╢реНрдп" />
        <button onClick={onSearch} disabled={loading} className="bg-[#FFB300] text-white px-4 py-2 rounded-lg hover:bg-[#FFC107]">рдЦреЛрдЬреЗрдВ</button>
        <button onClick={onSpeak} className="bg-[#1B5E20] text-white px-4 py-2 rounded-lg hover:bg-[#2E7D32]">рд╕реБрдиреЗрдВ</button>
      </div>
      {loading && <div className="text-sm text-gray-500">рдЦреЛрдЬ рд░рд╣рд╛ рд╣реИтАж</div>}
      {result && <pre className="whitespace-pre-wrap text-[#424242] font-devanagari leading-7">{result}</pre>}
    </div>
  );
}

export function AiSankalpGenerator() {
  const [name, setName] = useState('рд░рд╛рдо рд╢рд░реНрдорд╛');
  const [gotra, setGotra] = useState('рдХрд╢реНрдпрдк');
  const [details, setDetails] = useState('рд╕рддреНрдпрдирд╛рд░рд╛рдпрдг рдкреВрдЬрд╛');
  const [output, setOutput] = useState('');
  const [loading, setLoading] = useState(false);

  const generate = async () => {
    setLoading(true); setOutput('');
    const prompt = `рднреВрдорд┐рдХрд╛: рд╡реИрджрд┐рдХ рд╕рдВрдХрд▓реНрдк рдкрд╛рда рд╕рд╣рд╛рдпрдХред
рдХрд╛рд░реНрдп: рджрд┐рдП рдЧрдП рд╡рд┐рд╡рд░рдг рд╕реЗ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдкрд░ рдкрд░рдВрдкрд░рд╛рдиреБрдХреВрд▓ рд╕рдВрдХрд▓реНрдк рд▓рд┐рдЦреЗрдВред
рдЗрдирдкреБрдЯ: рдирд╛рдо: ${name}, рдЧреЛрддреНрд░: ${gotra}, рдкреВрдЬрд╛: ${details}
рдирд┐рд░реНрджреЗрд╢:
- рд╕рдВрд╕реНрдХреГрдд-рд╣рд┐рдВрджреА рдорд┐рд╢реНрд░рд┐рдд рдкрд░рдВрдкрд░рд╛рдЧрдд рд╢реИрд▓реА; рдмрд┐рдирд╛ рдЗрдореЛрдЬреАред
- рд╕реНрдерд╛рди рд╕рд╛рдорд╛рдиреНрдп рд░рдЦреЗрдВ, рддрд┐рдерд┐ рд╣реЗрддреБ <рддрд┐рдерд┐> рдЫреЛрдбрд╝реЗрдВред
- 5-8 рдкрдВрдХреНрддрд┐рдпрд╛рдБ, рдЕрдВрдд рдореЗрдВ рдХрд▓реНрдпрд╛рдгрдХрд╛рдордирд╛ред`;
    try {
      const text = await generateText({ prompt: `${prompt}\n\nName: ${name}\nGotra: ${gotra}\nPuja: ${details}` });
      setOutput(text);
    } catch (e) {
      const msg = (e?.message || '').includes('Missing VITE_GEMINI_API_KEY') ? 'API рдХреБрдВрдЬреА рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИред .env рдореЗрдВ VITE_GEMINI_API_KEY рд╕реЗрдЯ рдХрд░реЗрдВред' : (e?.message || 'рдЕрдЬреНрдЮрд╛рдд');
      setOutput('рддреНрд░реБрдЯрд┐: ' + msg);
    } finally { setLoading(false); }
  };

  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <h3 className="text-2xl font-bold text-[#1B5E20] mb-3 font-serif">AI рд╕рдВрдХрд▓реНрдк рдЬрдирд░реЗрдЯрд░</h3>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
        <input className="border rounded-lg px-3 py-2" value={name} onChange={e=>setName(e.target.value)} placeholder="рдирд╛рдо" />
        <input className="border rounded-lg px-3 py-2" value={gotra} onChange={e=>setGotra(e.target.value)} placeholder="рдЧреЛрддреНрд░" />
        <input className="border rounded-lg px-3 py-2" value={details} onChange={e=>setDetails(e.target.value)} placeholder="рдкреВрдЬрд╛ рд╡рд┐рд╡рд░рдг" />
      </div>
      <button onClick={generate} disabled={loading} className="bg-[#FFB300] text-white px-4 py-2 rounded-lg hover:bg-[#FFC107]">рд╕рдВрдХрд▓реНрдк рдмрдирд╛рдПрдВ</button>
      {loading && <div className="text-sm text-gray-500 mt-2">рдмрдирд╛ рд░рд╣рд╛ рд╣реИтАж</div>}
      {output && <pre className="mt-3 whitespace-pre-wrap text-[#424242] font-devanagari leading-7">{output}</pre>}
    </div>
  );
}

export function AiPanchangWidget() {
  const [data, setData] = useState('');
  const [loading, setLoading] = useState(false);
  const refresh = async () => {
    setLoading(true); setData('');
    const prompt = `рджрд┐рди рдХреЗ рдкрдВрдЪрд╛рдВрдЧ рдХрд╛ рд╕рдВрдХреНрд╖реЗрдк (рд╣рд┐рдВрджреА, 6-8 рдкрдВрдХреНрддрд┐рдпрд╛рдБ, рдмрд┐рдирд╛ рдЗрдореЛрдЬреА):
- рддрд┐рдерд┐, рдкрдХреНрд╖
- рдирдХреНрд╖рддреНрд░, рдпреЛрдЧ, рдХрд░рдг
- рд╕реВрд░реНрдпреЛрджрдп/рд╕реВрд░реНрдпрд╛рд╕реНрдд (рд╕рд╛рдорд╛рдиреНрдп)
- рдЖрдЬ рдХреЗ рд╕рд╛рдорд╛рдиреНрдп рд╢реБрдн рд╕рдордп/рд╡рд░реНрдЬреНрдп рдХрд╛рд▓ (рд╕рд╛рдорд╛рдиреНрдп)
рдзреНрдпрд╛рди рджреЗрдВ: рдпрд╣ AI-рдЬрдирд┐рдд рд╕рд╛рдорд╛рдиреНрдпреАрдХреГрдд рд╕рд╛рд░рд╛рдВрд╢ рд╣реИ, рд╕реНрдерд╛рдиреАрдп рдореБрд╣реВрд░реНрдд рд╣реЗрддреБ рдЕрдкрдиреЗ рдкрдВрдбрд┐рдд/рдкрдВрдЪрд╛рдВрдЧ рджреЗрдЦреЗрдВред`;
    try {
      const text = await generateText({ prompt });
      setData(text);
    } catch (e) { const msg=(e?.message||'').includes('Missing VITE_GEMINI_API_KEY')?'API рдХреБрдВрдЬреА рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИред .env рдореЗрдВ VITE_GEMINI_API_KEY рд╕реЗрдЯ рдХрд░реЗрдВред':(e?.message||'рдЕрдЬреНрдЮрд╛рдд'); setData('рддреНрд░реБрдЯрд┐: '+msg); }
    finally { setLoading(false); }
  };
  useEffect(()=>{ refresh(); },[]);
  return (
    <div className="p-6 rounded-2xl shadow-lg bg-white border border-gray-200">
      <div className="flex items-center justify-between mb-3">
        <h3 className="text-2xl font-bold text-[#1B5E20] font-serif">рдбреЗрд▓реА рдкрдВрдЪрд╛рдВрдЧ (AI)</h3>
        <button onClick={refresh} className="bg-[#1B5E20] text-white px-3 py-1.5 rounded-lg hover:bg-[#2E7D32]">Refresh</button>
      </div>
      {loading && <div className="text-sm text-gray-500">рдЕрдкрдбреЗрдЯ рдХрд░ рд░рд╣рд╛ рд╣реИтАж</div>}
      {data && <pre className="whitespace-pre-wrap text-[#424242] font-devanagari leading-7">{data}</pre>}
    </div>
  );
}

export function FloatingPujaChatbot() {
  const [open, setOpen] = useState(false);
  const [step, setStep] = useState('greeting');
  const [userInput, setUserInput] = useState('');
  const [aiResponse, setAiResponse] = useState({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [bookingData, setBookingData] = useState({ name: '', date: '', location: '', type: 'online' });

  const ask = async () => {
    if (!userInput.trim()) return;
    setLoading(true); setError('');
    try {
      const prompt = `рднреВрдорд┐рдХрд╛: рдЕрдиреБрднрд╡реА рд╡реИрджрд┐рдХ рдЖрдЪрд╛рд░реНрдп-рд╕рд╣рд╛рдпрдХред\nрдкреНрд░рд╢реНрди: "${userInput}"\nрддреАрди рднрд╛рдЧреЛрдВ рдореЗрдВ рдЙрддреНрддрд░ рджреЗрдВ: \nрдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡: ...\nрдХрд╛рд░рдг: ...\nрд╕рд╛рдордЧреНрд░реА: ...`;
      const text = await generateText({ prompt });
      const lines = text.split('\n');
      let pujaSuggestion = '', reason = '', materials = '';
      lines.forEach(line => {
        if (line.includes('рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡')) pujaSuggestion = line.split(':')[1]?.trim() || pujaSuggestion;
        if (line.startsWith('рдХрд╛рд░рдг')) reason = line.split(':')[1]?.trim() || reason;
        if (line.startsWith('рд╕рд╛рдордЧреНрд░реА')) materials = line.split(':')[1]?.trim() || materials;
      });
      setAiResponse({
        pujaSuggestion: pujaSuggestion || text,
        reason: reason || 'рд╢реБрдн рдлрд▓ рд╣реЗрддреБ рдЕрдиреБрдХреВрд▓ред',
        materials: materials || 'рдореВрд▓ рдкреВрдЬрд╛ рд╕рд╛рдордЧреНрд░реА рдЖрд╡рд╢реНрдпрдХред'
      });
      setStep('action');
    } catch (e) {
      const msg = (e?.message || '').includes('Missing VITE_GEMINI_API_KEY') ? 'API рдХреБрдВрдЬреА рдЕрдиреБрдкрд▓рдмреНрдз рд╣реИред' : (e?.message || 'рддреНрд░реБрдЯрд┐');
      setError(msg);
    } finally { setLoading(false); }
  };

  const reset = () => { setStep('greeting'); setUserInput(''); setAiResponse({}); setError(''); };

  return (
    <div>
      <button onClick={()=>setOpen(!open)} className="fixed bottom-24 right-6 z-50 bg-[#FFB300] text-white px-4 py-3 rounded-full shadow-xl hover:bg-[#FFC107]">
        AI рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡
      </button>
      {open && (
        <div className="fixed bottom-40 right-6 z-50 w-80 bg-white border border-gray-200 rounded-2xl shadow-2xl overflow-hidden">
          <div className="bg-[#1B5E20] text-white px-4 py-2 font-semibold">AI Puja Suggestion</div>
          <div className="p-3 space-y-3">
            {step === 'greeting' && (
              <div>
                <div className="text-sm text-[#424242] mb-2 font-devanagari">ЁЯЩП рдирдорд╕реНрддреЗ! рдХрд┐рд╕ рд╡рд┐рд╖рдп рдореЗрдВ рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡ рдЪрд╛рд╣рд┐рдП? (рдХрд░рд┐рдпрд░, рд╕реНрд╡рд╛рд╕реНрдереНрдп, рд╡рд┐рд╡рд╛рд╣тАж)</div>
                <div className="flex gap-2">
                  <input value={userInput} onChange={e=>setUserInput(e.target.value)} className="flex-1 border rounded-lg px-3 py-2 text-sm" placeholder="рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рд▓рд┐рдЦреЗрдВ" />
                  <button onClick={ask} className="bg-[#FFB300] text-white px-3 py-2 rounded-lg hover:bg-[#FFC107] text-sm">рдкреВрдЫреЗрдВ</button>
                </div>
                {loading && <div className="text-xs text-gray-500 mt-1">рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИтАж</div>}
                {error && <div className="text-xs text-red-600 mt-1">{error}</div>}
              </div>
            )}

            {step === 'action' && aiResponse.pujaSuggestion && (
              <div className="space-y-2 text-sm">
                <div className="bg-[#F5F5F5] p-2 rounded">
                  <div className="font-semibold text-[#1B5E20]">рдкреВрдЬрд╛ рд╕реБрдЭрд╛рд╡</div>
                  <div className="font-devanagari">{aiResponse.pujaSuggestion}</div>
                </div>
                <div className="bg-[#F5F5F5] p-2 rounded">
                  <div className="font-semibold text-[#1B5E20]">рд╕рдВрдХреНрд╖рд┐рдкреНрдд рдХрд╛рд░рдг</div>
                  <div className="font-devanagari">{aiResponse.reason}</div>
                </div>
                <div className="bg-[#F5F5F5] p-2 rounded">
                  <div className="font-semibold text-[#1B5E20]">рдкреВрдЬрд╛ рд╕рд╛рдордЧреНрд░реА</div>
                  <div className="font-devanagari">{aiResponse.materials}</div>
                </div>
                <div className="flex gap-2">
                  <button onClick={()=>setStep('booking')} className="flex-1 bg-[#FFB300] text-white px-3 py-2 rounded-lg hover:bg-[#FFC107] text-sm">ЁЯУЕ рдмреБрдХ рдХрд░реЗрдВ</button>
                  <button onClick={()=>setStep('info')} className="flex-1 bg-[#1B5E20] text-white px-3 py-2 rounded-lg hover:bg-[#2E7D32] text-sm">ЁЯУЦ рд╡рд┐рдзрд┐</button>
                </div>
              </div>
            )}

            {step === 'booking' && (
              <div className="space-y-2 text-sm">
                <div className="font-semibold text-[#1B5E20]">рдмреБрдХрд┐рдВрдЧ</div>
                <input className="w-full border rounded-lg px-3 py-2" placeholder="рдирд╛рдо" value={bookingData.name} onChange={e=>setBookingData({...bookingData, name: e.target.value})} />
                <input className="w-full border rounded-lg px-3 py-2" type="date" value={bookingData.date} onChange={e=>setBookingData({...bookingData, date: e.target.value})} />
                <select className="w-full border rounded-lg px-3 py-2" value={bookingData.type} onChange={e=>setBookingData({...bookingData, type: e.target.value})}>
                  <option value="online">рдСрдирд▓рд╛рдЗрди</option>
                  <option value="offline">рдСрдлрд╝рд▓рд╛рдЗрди</option>
                </select>
                {bookingData.type==='offline' && (
                  <input className="w-full border rounded-lg px-3 py-2" placeholder="рдкрддрд╛" value={bookingData.location} onChange={e=>setBookingData({...bookingData, location: e.target.value})} />
                )}
                <div className="flex gap-2">
                  <button onClick={()=>{ alert('рдмреБрдХрд┐рдВрдЧ рд╕рдлрд▓!'); reset(); setOpen(false); }} className="flex-1 bg-[#FFB300] text-white px-3 py-2 rounded-lg hover:bg-[#FFC107]">рдХрдиреНрдлрд░реНрдо</button>
                  <button onClick={reset} className="bg-gray-500 text-white px-3 py-2 rounded-lg hover:bg-gray-600">рд░рджреНрдж</button>
                </div>
              </div>
            )}

            {step === 'info' && (
              <div className="space-y-2 text-sm">
                <div className="font-semibold text-[#1B5E20]">рдкреВрдЬрд╛ рд╡рд┐рдзрд┐ рдФрд░ рдордВрддреНрд░</div>
                <div className="bg-[#F5F5F5] p-2 rounded font-devanagari">
                  <div><b>рд╡рд┐рдзрд┐:</b> рд╕реНрдирд╛рди рдХрд░ рд╕реНрдерд╛рди рд╢реБрджреНрдз рдХрд░реЗрдВ, рджреАрдкрдХ рдЬрд▓рд╛рдПрдБ, рд╕рдВрдХрд▓реНрдк рд▓реЗрдХрд░ рдкреВрдЬрд╛ рд╢реБрд░реВ рдХрд░реЗрдВред</div>
                  <div><b>рдордВрддреНрд░:</b> "реР рдЧрдгреЗрд╢рд╛рдп рдирдордГ"</div>
                  <div><b>рд╕рдордп:</b> рдкреНрд░рд╛рддрдГ/рд╕рд╛рдпрдВ 6-8</div>
                  <div><b>рджрд┐рди:</b> рдордВрдЧрд▓рд╡рд╛рд░/рдЧреБрд░реБрд╡рд╛рд░ рд╢реБрдн</div>
                </div>
                <button onClick={reset} className="w-full bg-[#1B5E20] text-white px-3 py-2 rounded-lg hover:bg-[#2E7D32]">рдирдпрд╛ рдкреНрд░рд╢реНрди</button>
          </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

export default function AIPage() {
  return (
    <div className="container mx-auto px-4 py-16">
      <h2 className="text-4xl font-bold text-[#1B5E20] mb-6 font-serif">AI Modules</h2>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <AiPujaSuggestion />
        <AiMantraAssistant />
        <AiSankalpGenerator />
        <AiPanchangWidget />
      </div>
      <FloatingPujaChatbot />
    </div>
  );
}


