// WhatsApp Business API integration for sending booking details

// WhatsApp Business API configuration
const WHATSAPP_CONFIG = {
    // Your WhatsApp Business API credentials from Meta Developer
    phoneNumberId: import.meta.env.VITE_WHATSAPP_PHONE_NUMBER_ID,
    accessToken: import.meta.env.VITE_WHATSAPP_ACCESS_TOKEN,
    apiVersion: 'v18.0',
    recipientNumber: import.meta.env.VITE_WHATSAPP_RECIPIENT_NUMBER, // Your WhatsApp number to receive messages
};

// WhatsApp Business API endpoint
const getWhatsAppApiUrl = () => {
    return `https://graph.facebook.com/${WHATSAPP_CONFIG.apiVersion}/${WHATSAPP_CONFIG.phoneNumberId}/messages`;
};

// Format booking details for WhatsApp message
const formatBookingMessage = (bookingData) => {
    const { 
        name, 
        phone, 
        email, 
        serviceType, 
        date, 
        time, 
        address, 
        amount, 
        bookingId,
        paymentId,
        specialRequests,
        // Birth details for Kundali
        dateOfBirth,
        birthTime,
        birthPeriod,
        birthPlace
    } = bookingData;

    // Get service name
    const services = {
        'daily-flower-mala-monthly': 'рдбреЗрд▓реА рдлреВрд▓ рдорд╛рд▓рд╛ (рдордВрдерд▓реА)',
        'nirmalya-monthly': 'рдирд┐рд░реНрдорд╛рд▓реНрдп рд╕реЗрд╡рд╛ (рдордВрдерд▓реА)',
        'nirmalya-4months': 'рдирд┐рд░реНрдорд╛рд▓реНрдп 4 рдорд╣реАрдиреЗ',
        'astrology-kundali': 'рдЬреНрдпреЛрддрд┐рд╖ рдХреБрдВрдбрд▓реА рд╡рд┐рд╢реНрд▓реЗрд╖рдг'
    };

    const serviceName = services[serviceType] || serviceType;

    let message = `ЁЯХЙя╕П *рдирдИ рдмреБрдХрд┐рдВрдЧ - рдЕрд░реНрдЪрдирдореН*\n\n`;
    message += `ЁЯУЛ *рдмреБрдХрд┐рдВрдЧ рд╡рд┐рд╡рд░рдг:*\n`;
    message += `тАв рдмреБрдХрд┐рдВрдЧ ID: ${bookingId}\n`;
    message += `тАв рд╕реЗрд╡рд╛: ${serviceName}\n`;
    message += `тАв рд░рд╛рд╢рд┐: тВ╣${amount}\n`;
    message += `тАв рднреБрдЧрддрд╛рди ID: ${paymentId}\n\n`;
    
    message += `ЁЯСд *рдЧреНрд░рд╛рд╣рдХ рд╡рд┐рд╡рд░рдг:*\n`;
    message += `тАв рдирд╛рдо: ${name}\n`;
    message += `тАв рдлреЛрди: ${phone}\n`;
    message += `тАв рдИрдореЗрд▓: ${email}\n`;
    message += `тАв рдкрддрд╛: ${address}\n\n`;
    
    message += `ЁЯУЕ *рд╕реЗрд╡рд╛ рд╡рд┐рд╡рд░рдг:*\n`;
    message += `тАв рддрд╛рд░реАрдЦ: ${date}\n`;
    message += `тАв рд╕рдордп: ${time}\n`;

    // Add birth details for Kundali service
    if (serviceType === 'astrology-kundali' && dateOfBirth) {
        message += `\nЁЯМЯ *рдЬрдиреНрдо рд╡рд┐рд╡рд░рдг (рдХреБрдВрдбрд▓реА рдХреЗ рд▓рд┐рдП):*\n`;
        message += `тАв рдЬрдиреНрдо рддрд┐рдерд┐: ${dateOfBirth}\n`;
        if (birthTime) {
            message += `тАв рдЬрдиреНрдо рд╕рдордп: ${birthTime} ${birthPeriod}\n`;
        }
        if (birthPlace) {
            message += `тАв рдЬрдиреНрдо рд╕реНрдерд╛рди: ${birthPlace}\n`;
        }
    }

    if (specialRequests) {
        message += `\nЁЯУЭ *рд╡рд┐рд╢реЗрд╖ рдЕрдиреБрд░реЛрдз:*\n${specialRequests}\n`;
    }

    message += `\nтП░ *рдмреБрдХрд┐рдВрдЧ рд╕рдордп:* ${new Date().toLocaleString('hi-IN')}\n`;
    message += `\nтЬЕ *рд╕реНрдерд┐рддрд┐:* рднреБрдЧрддрд╛рди рд╕рдлрд▓`;

    return message;
};

// Send WhatsApp message using Meta Business API
export const sendWhatsAppMessage = async (bookingData) => {
    try {

        // Check if WhatsApp is configured
        if (!WHATSAPP_CONFIG.phoneNumberId || !WHATSAPP_CONFIG.accessToken || !WHATSAPP_CONFIG.recipientNumber) {
            return { success: false, error: 'WhatsApp not configured' };
        }

        const message = formatBookingMessage(bookingData);
        
        // Use custom booking confirmation template
        const payload = {
            messaging_product: "whatsapp",
            to: WHATSAPP_CONFIG.recipientNumber,
            type: "template",
            template: {
                name: "booking_confirmation",
                language: {
                    code: "en" // English language code as per your template
                },
                components: [
                    {
                        type: "body",
                        parameters: [
                            { type: "text", text: bookingData.name || 'рдЧреНрд░рд╛рд╣рдХ' },                    // {{1}} - Name
                            { type: "text", text: bookingData.bookingId || 'N/A' },                // {{2}} - Booking ID
                            { type: "text", text: bookingData.phone || 'N/A' },                    // {{3}} - Phone
                            { type: "text", text: bookingData.email || 'N/A' },                    // {{4}} - Email
                            { type: "text", text: bookingData.serviceType || 'рд╕реЗрд╡рд╛' },             // {{5}} - Service
                            { type: "text", text: bookingData.date || 'N/A' },                     // {{6}} - Date
                            { type: "text", text: bookingData.time || 'N/A' },                     // {{7}} - Time
                            { type: "text", text: bookingData.address || 'N/A' },                  // {{8}} - Address
                            { type: "text", text: bookingData.amount?.toString() || '0' },         // {{9}} - Amount
                            { type: "text", text: bookingData.paymentId || 'N/A' },               // {{10}} - Payment ID
                            { type: "text", text: bookingData.specialRequests || 'рдХреЛрдИ рд╡рд┐рд╢реЗрд╖ рдЕрдиреБрд░реЛрдз рдирд╣реАрдВ' } // {{11}} - Special requests
                        ]
                    }
                ]
            }
        };

        const response = await fetch(getWhatsAppApiUrl(), {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${WHATSAPP_CONFIG.accessToken}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        const result = await response.json();

        if (response.ok) {
            return { success: true, messageId: result.messages?.[0]?.id };
        } else {
            return { success: false, error: result.error?.message || 'Failed to send message' };
        }

    } catch (error) {
        return { success: false, error: error.message };
    }
};

// Send confirmation message to customer (optional)
export const sendCustomerConfirmation = async (customerPhone, bookingData) => {
    try {

        if (!WHATSAPP_CONFIG.phoneNumberId || !WHATSAPP_CONFIG.accessToken) {
            return { success: false, error: 'WhatsApp not configured' };
        }

        const services = {
            'daily-flower-mala-monthly': 'рдбреЗрд▓реА рдлреВрд▓ рдорд╛рд▓рд╛ (рдордВрдерд▓реА)',
            'nirmalya-monthly': 'рдирд┐рд░реНрдорд╛рд▓реНрдп рд╕реЗрд╡рд╛ (рдордВрдерд▓реА)',
            'nirmalya-4months': 'рдирд┐рд░реНрдорд╛рд▓реНрдп 4 рдорд╣реАрдиреЗ',
            'astrology-kundali': 'рдЬреНрдпреЛрддрд┐рд╖ рдХреБрдВрдбрд▓реА рд╡рд┐рд╢реНрд▓реЗрд╖рдг'
        };

        const serviceName = services[bookingData.serviceType] || bookingData.serviceType;

        let message = `ЁЯХЙя╕П *рдЕрд░реНрдЪрдирдореН - рдмреБрдХрд┐рдВрдЧ рдкреБрд╖реНрдЯрд┐*\n\n`;
        message += `рдирдорд╕реНрддреЗ ${bookingData.name} рдЬреА,\n\n`;
        message += `рдЖрдкрдХреА рдмреБрдХрд┐рдВрдЧ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░реНрдг рд╣реЛ рдЧрдИ рд╣реИ!\n\n`;
        message += `ЁЯУЛ *рд╡рд┐рд╡рд░рдг:*\n`;
        message += `тАв рд╕реЗрд╡рд╛: ${serviceName}\n`;
        message += `тАв рдмреБрдХрд┐рдВрдЧ ID: ${bookingData.bookingId}\n`;
        message += `тАв рддрд╛рд░реАрдЦ: ${bookingData.date}\n`;
        message += `тАв рд╕рдордп: ${bookingData.time}\n`;
        message += `тАв рд░рд╛рд╢рд┐: тВ╣${bookingData.amount}\n\n`;
        message += `рд╣рдорд╛рд░реА рдЯреАрдо рдЬрд▓реНрдж рд╣реА рдЖрдкрд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдЧреАред\n\n`;
        message += `рдзрдиреНрдпрд╡рд╛рдж! ЁЯЩП\n`;
        message += `*рдЕрд░реНрдЪрдирдореН рдЯреАрдо*`;

        const payload = {
            messaging_product: "whatsapp",
            to: customerPhone,
            type: "text",
            text: {
                body: message
            }
        };

        const response = await fetch(getWhatsAppApiUrl(), {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${WHATSAPP_CONFIG.accessToken}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        const result = await response.json();

        if (response.ok) {
            return { success: true, messageId: result.messages?.[0]?.id };
        } else {
            return { success: false, error: result.error?.message || 'Failed to send confirmation' };
        }

    } catch (error) {
        return { success: false, error: error.message };
    }
};

// WhatsApp test functions removed for production